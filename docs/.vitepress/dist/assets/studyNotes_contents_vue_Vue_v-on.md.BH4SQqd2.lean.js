import{_ as s,c as i,a1 as e,o as a}from"./chunks/framework.B0cMFUTE.js";const c=JSON.parse('{"title":"v-on","description":"","frontmatter":{},"headers":[],"relativePath":"studyNotes/contents/vue/Vue/v-on.md","filePath":"studyNotes/contents/vue/Vue/v-on.md"}'),n={name:"studyNotes/contents/vue/Vue/v-on.md"};function l(d,t,h,p,r,o){return a(),i("div",null,t[0]||(t[0]=[e(`<h1 id="v-on" tabindex="-1">v-on <a class="header-anchor" href="#v-on" aria-label="Permalink to &quot;v-on&quot;">​</a></h1><h2 id="使用方法" tabindex="-1">使用方法 <a class="header-anchor" href="#使用方法" aria-label="Permalink to &quot;使用方法&quot;">​</a></h2><p>在 Vue 的世界中，要對要對 DOM 加入事件的話，會使用==v-on==來作為加入事件的指令，</p><p>寫法是==v-on:click=&quot;你取的事件名字&quot;==</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">click</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">你取的事件名稱</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;按鈕&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>簡寫的話會是==@click=&quot;你取的事件名字&quot;==</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> @</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">click</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">你取的事件名稱;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;按鈕:現在點了{{sum}}下&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> sum</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">你取的事件名稱() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	sum.value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="事件" tabindex="-1">事件 <a class="header-anchor" href="#事件" aria-label="Permalink to &quot;事件&quot;">​</a></h2><p>所以你看到這兩種都是對的，他的使用方式就跟原生 Javascript 差不多，</p><p>只是 Javascript 會需要先拿到元素在加入事件，在 Vue 只要寫在元素裡呼叫要執行的函式就可以了。</p><p>幾乎所有瀏覽器原生支援的事件，我們來看幾個常用的舉例：</p><table tabindex="0"><thead><tr><th style="text-align:center;">HTML</th><th style="text-align:center;">Vue</th><th style="text-align:center;">用法</th></tr></thead><tbody><tr><td style="text-align:center;">onclick</td><td style="text-align:center;">@click</td><td style="text-align:center;">當元素被點擊時</td></tr><tr><td style="text-align:center;">onchange</td><td style="text-align:center;">@change</td><td style="text-align:center;">當元素(通常是表單選項)裡面的值改變後失去焦點</td></tr><tr><td style="text-align:center;">onblur</td><td style="text-align:center;">@blur</td><td style="text-align:center;">當元素(通常是輸入框)失去焦點時</td></tr><tr><td style="text-align:center;">onfocus</td><td style="text-align:center;">@focus</td><td style="text-align:center;">當元素(通常是輸入框)獲得焦點時</td></tr><tr><td style="text-align:center;">onsubmit</td><td style="text-align:center;">@submit</td><td style="text-align:center;">當使用者提交表單時</td></tr><tr><td style="text-align:center;">onreset</td><td style="text-align:center;">@reset</td><td style="text-align:center;">當表單需要重置時</td></tr><tr><td style="text-align:center;">onscroll</td><td style="text-align:center;">@scroll</td><td style="text-align:center;">當使用者在視窗或某個可以滾動的區域滾動時觸發</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr></tbody></table><h2 id="修飾符" tabindex="-1">修飾符 <a class="header-anchor" href="#修飾符" aria-label="Permalink to &quot;修飾符&quot;">​</a></h2><p>再來我們看一下==v-on==的修飾符，常用的有幾種在這跟大家說一下：</p><h3 id="使用方式" tabindex="-1">使用方式 <a class="header-anchor" href="#使用方式" aria-label="Permalink to &quot;使用方式&quot;">​</a></h3><p>在要使用的事件後面加上==.修飾符==就可以了。</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> @</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">submir</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">prevent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">你取的事件名稱;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;按鈕&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>這樣就可以阻止預設行為發生。</p><p>下面分種類介紹幾個常用的修飾符</p><ul><li><p><strong>事件行為控制類</strong>：</p><ul><li><strong><code>.stop</code></strong>：呼叫 <code>event.stopPropagation()</code>，防止事件繼續向父層元素冒泡。</li><li><strong><code>.prevent</code></strong>：呼叫 <code>event.preventDefault()</code>，阻止事件的預設行為發生（例如按鈕預設提交表單的行為）。</li><li><strong><code>.capture</code></strong>：以捕獲模式 (capture mode) 綁定事件監聽器。事件會先在此元素上被攔截，再往下傳遞到子元素。</li><li><strong><code>.once</code></strong>：事件只會觸發一次，之後監聽器會自動移除。</li><li><strong><code>.passive</code></strong>：告訴瀏覽器此事件處理函式不會呼叫 <code>preventDefault()</code>，提升像是 <code>touchstart</code>、<code>scroll</code> 等事件的效能表現。</li></ul></li><li><p><strong>鍵盤與滑鼠按鍵限定類</strong>（適用於鍵盤事件和部分滑鼠事件）：</p><ul><li><strong><code>.enter</code></strong>、<code>.tab</code>、<code>.delete</code>、<code>.esc</code>、<code>.space</code>、<code>.up</code>、<code>.down</code>、<code>.left</code>、<code>.right</code>：<br> 針對特定按鍵監聽事件。例如 <code>@keyup.enter</code> 只在使用者按下 Enter 鍵後觸發。</li><li><strong><code>.ctrl</code>、<code>.alt</code>、<code>.shift</code>、<code>.meta</code></strong>：<br> 在事件觸發時要求同時按下對應的修飾鍵（Ctrl、Alt、Shift、Meta）。<br> 例如：<code>@click.ctrl=&quot;...&quot;</code> 只有在使用者按住 Ctrl 再點擊時觸發。</li><li><strong><code>.exact</code></strong>：嚴格匹配修飾鍵組合。例如 <code>@keyup.ctrl.exact=&quot;...&quot;</code> 只有在使用者只按 Ctrl（而非 Ctrl+Shift 或其他組合）時才觸發。</li></ul></li></ul>`,20)]))}const g=s(n,[["render",l]]);export{c as __pageData,g as default};
